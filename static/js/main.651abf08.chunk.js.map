{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","a","onClick","toggleBluMode","role","style","htmlFor","toggleMode","TextForm","useState","text","setText","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","alert","toLowerCase","length","str","split","i","slice","join","document","getElementById","select","navigator","clipboard","writeText","charAt","Alert","typ","word","capitalize","msg","defaultProps","second","App","myMode","setMode","setAlert","showAlert","massage","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.651abf08.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode==='light'?'light':'dark'} bg-${props.mode==='light'?'light':'dark'}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" a=\"/\">Home</a>\r\n              </li>\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-2`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleBluMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"  style={{\"cursor\": \"pointer\"}} />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{\"cursor\": \"pointer\"}}>{props.mode==='light'?'Enable Blue Dark Mode':'Enable Light Mode'}</label>\r\n            </div>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'} mx-2`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"  style={{\"cursor\": \"pointer\"}} />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{\"cursor\": \"pointer\"}}>{props.mode==='light'?'Enable Dark Mode':'Enable Light Mode'}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    second: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set Title here',\r\n    second: 'About Text here'\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.alert(\" Text transform to Upper Case!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.alert(\" Text transform to Lower Case!\", \"success\");\r\n    }\r\n\r\n    const handleSentenceClick = ()=>{\r\n        if(text.length>0){\r\n            let str = text.toLowerCase().split(\". \");\r\n            for(let i=0; i<str.length; i++){\r\n                str[i] = str[i][0].toUpperCase() + str[i].slice(1);\r\n            }\r\n            setText(str.join(\". \"));\r\n        }\r\n        props.alert(\" Text transform to Sentance Case!\", \"success\");\r\n    }\r\n\r\n    const handleCopyClick = ()=>{\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.alert(\" Text Copied!\", \"success\");\r\n    }\r\n\r\n    const handleClrClick = ()=>{\r\n        setText(\"\");\r\n        props.alert(\" Text Section is Cleared!\", \"success\");\r\n    }\r\n\r\n    const wordCal = ()=>{\r\n        if(text.charAt(text.length-1) === \" \" || text.charAt(text.length-1)===\"\"){\r\n            return text.split(\" \").length-1;\r\n        }\r\n        else{\r\n            return text.split(\" \").length;\r\n        }\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const[text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className='container my-3' style={{color : props.mode==='light'?'black':'white'}} >\r\n                <h2>{props.heading}</h2>\r\n                <div className=\"mb-3 my-2\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='light'?'white':'grey', color : props.mode==='light'?'black':'white'}} id=\"myBox\" rows=\"10\"></textarea>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to UPPERCASE</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to lowercase</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleSentenceClick}>Convert to Sentence case</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleCopyClick}>Copy Text</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-1 my-1\" onClick={handleClrClick}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color : props.mode==='light'?'black':'white'}}>\r\n                <h3>Your Text Summary</h3>\r\n                <p> {wordCal()} Words and {text.length} Characters </p>\r\n                <p> Avg. Time to Read this text : {text.length>0?0.008*text.split(\" \").length:0} Minutes </p>\r\n                <h3>Preview</h3>\r\n                <p> {text.length>0?text:\"Enter something in the Text Box to preview it here\"} </p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const str = word.toLowerCase();\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.typ} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.typ)}</strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react'\nimport Alert from './components/Alert';\n\nfunction App() {\n  const[myMode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n  \n  const showAlert = (massage, type) =>{\n    setAlert({\n      msg : massage,\n      typ : type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const modeManager = () =>{\n    if(myMode==='dark'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\" Light Mode has been Enabled!\", \"success\");\n    }\n    else{\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(62 62 80)';\n      showAlert(\" Dark Mode has been Enabled!\", \"success\");\n    }\n  }\n\n  const modeBluManager = () => {\n    if(myMode==='blue'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\" Light Mode has been Enabled!\", \"success\");\n    }\n    else{\n      setMode('blue');\n      document.body.style.backgroundColor = '#000064';\n      showAlert(\" Dark Mode has been Enabled!\", \"success\");\n    }\n  }\n  \n  return (\n    <>\n      <Navbar title=\"TextUtiles\" second=\"About Us\" mode={myMode} toggleMode={modeManager} toggleBluMode={modeBluManager}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n            <TextForm heading=\"Enter your Text here to Analize\" mode={myMode} alert={showAlert} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}